{
  "title": "chapter 2",
  "cells": [
    {
      "type": "text",
      "data": "Chapter 2 variables and types<div><ol><li>primitive type</li><ol><li>arithmatic type</li><ol><li>integral type: bool and char int and int like types</li><li>floating type: float and double</li></ol><li>signed type and unsigned type: be careful about unsigned accuracy when sighed type involved</li><li>type conversion: addition and truncation</li><li>literals:(some chars with its own evident meanings) integers and floating point numbers; escape sequences (could also specfy type of a literal)</li></ol><li>variables</li><ol><li>initialization:</li><ol><li>int a = 0; &nbsp;<span style=\"line-height: 1.4;\">int b = {1}; &nbsp;</span><span style=\"line-height: 1.4;\">int c(2); &nbsp;</span><span style=\"line-height: 1.4;\">int d{3};</span></li><li>for {}, and the inside type must be exactly the same; so long double a = 2.009; int b{a}; would cause an error in compiler;</li><li>for (), the type would be okay if whats fed could be converted to whats need like double a = 2.0; int b(a);</li></ol><li>declaration vs definition:</li><ol><li>decelaration is to let the program know that there is such a variable: it specifies the name and also the type of this variable;</li><li>in addition to what declaration does for a variable, the definition also allocate some memory for the variable and also might assign it with a initial value;</li><li>Here “int a = 0” def &nbsp; &nbsp;“int a” def” &nbsp; &nbsp;“extern int a = 0” def &nbsp; “extern int a” is a declaration not a definition</li></ol><li>identifier</li><ol><li>Identifiers are names for variables and they should follow such rules:</li><ol><li>they are made of letters, digits and underscores;</li><li>single word identifiers are usually lower cases;</li><li>multiple word identifiers should be split with _</li><li>Class name should start with capitalized</li></ol><li>scope of an identifier: nested scopes</li><ol><li>if inner scope has a variable with same name as some variable outside:</li><ol><li>inner would be used first if use it directly;</li><li>::&lt;variable name&gt; would use the outside global variable explicitly</li></ol></ol></ol></ol><li>compound type: pointer and reference</li><ol><li>references:</li><ol><li>here the reference is “lvalue reference”;</li><li>a reference is an alias and it has to be initialized: int a = 0; int &amp;b = a; // okay and b is a reference of a &nbsp;int &amp;c; // error the reference has to be initialized</li><li>reference initialization(more than one in one statements); int a = 0; int &amp;b = a, c = a; // b is a ref and c is a copy int &amp;d = a, &amp;e = a; // both d and e are refs</li><li>when initing or assigning ref, the typa has to match if there is no other explanations</li></ol><li>pointers</li><ol><li>pointer stores address of an object;&nbsp;</li><li>define a pointer with &amp; operator int a = 0; int *a_ptr = &amp;a; // a_ptr is a pointer that points to object a</li><li>the type of 2 sides have to match (meaning the same or the left is void) void could accept any kind of pointer but it can only do assignment and comparison with another void pointer</li><li>null pointer: int *p = 0; int *ptr = NULL; int *ptr = nullptr; (cannot be init with an int even its value is 0)</li></ol><li>a little more</li><ol><li>pointer itself is an object so we could make another pointer pointing to this pointer so that dereferencing this pointer yields the “first pointer”;</li><li>beause reference itself is not an object so we could not make a pointer that points to this reference (if we do that, that pointer will point to the object referred by that reference) but we could make a referrence that refers to a pointer because the pointer itself is an object.</li></ol></ol><li>const</li><ol><li>const</li><ol><li>means that cannot be changed after init (which also implies that we have to init the variable)</li><li>** const is locall&nbsp;</li><ol><li>// in file.cc &nbsp; &nbsp;extern const int buff_size = 512;</li><li>// in file.h &nbsp; &nbsp; extern const int buff_size;</li></ol></ol><li>reference and const</li><ol><li>const reference (reference to const) means that the object this reference refers to cannot be changed by this reference</li><li>** init a const reference with an object (the object could be some compatible type like double to int), why? because if it is a const then the temporary object would be referred by the new ref and it is safe because the ref cannot be changed but if the ref is not const which means that people might want to change the initial object by means of this object, which is in vain and also losing the temporary one;</li><li>a const reference can refer to an object that is not const&nbsp;</li></ol><li>pointers and const</li><ol><li>top level const: the pointer itself cannot be changed like &nbsp; &nbsp;int *const s = nullptr;</li><li>low level const: the pointed object cannot be changed by this pointer like &nbsp;int a = 0; &nbsp; const int* s = &amp;a; // this pointer could be assigned with a new value but cannot change a by this pointer</li><li>way to distinguish: the nearest decides its scope of restriction (const int make int immutable and *const make the pointer immutable)</li></ol><li>constexpr and constant expression</li><ol><li>a constant expression is an expression that cannot be changed and could be evaluated during compilation time (it is a standard for an expression)</li><ol><li>const int a = 0; // this a is a constant expression</li><li><span style=\"line-height: 1.4;\">int *const ptr = nullptr; // this ptr is a constant expression</span></li></ol><li>constexpr is modification so that the compiler would check if variabel with this modification is a const expression, if not then there is an error</li><ol><li>constexpr int mf = 20; // this is fine because mf if a constant expression</li><li>constexpr int size = mf + 1; // also fine</li></ol><li>lliteral types</li><ol><li>those types that could be evaluated during compilation time are called &nbsp;“literal types” like arithmatic types and pointer and reference;(but also the reference and pointer are also restricted by types of objects)</li><li>others like some user_defined class and standard IO are not literal types</li></ol><li>constexpr and pointer</li><ol><li>constexpr make top level const so &nbsp; &nbsp; constexpr int *p = nullptr; &nbsp; is not make the object pointed by p immutable but p itself</li></ol></ol></ol><li>dealing with types</li><ol><li>type alias</li><ol><li>typedef &lt;known_type&gt; &lt;alias_name&gt; like &nbsp; &nbsp; typedef double wages; // make wages a type of double &nbsp; &nbsp; &nbsp; &nbsp;// typedef wages base, *p; // here base is double type and p is double*</li><li>using &lt;new_name&gt; = &lt;known_type&gt; like &nbsp; &nbsp; &nbsp;using SI = Sales_Item; // make SI an alias of Sales_Item&nbsp;</li><li>** typedef char *pstring; const pstring = 0; // make the pointer immutable &nbsp; &nbsp; const *pstring; // make the pointed object which is also a pointer here immutable, low-level const</li></ol><li>auto specifier — introduced in C++11 and the compiler will give a suitable type if possible; &nbsp;g++ -std=c++11 -o main.cpp</li><ol><li>int a = 0; int b = 2; auto c = a + b; // auto will give c the return type of + operand as c’s type</li><li>int i = 0; const int ci = 1; auto j = i, cj = ci; // error because auto can only make one type but here it needs to make const int and int at the same time</li><li>auto to reference: int i = 0; int ref_i = i; auto j = ref_i; // here j is an int rather than a ref, ignoring that ref_i is a reference</li><li>ignore tpo-level const &nbsp; &nbsp; int i = 0; const ci = i, &amp;ref_ci = i; &nbsp; &nbsp; auto b = ci; //int &nbsp;auto d = ref_ci; //int &nbsp;auto e = &amp;i; //int* &nbsp; auto f = &amp;ci; // const int* because here its low level const&nbsp;</li><li>add const to auto &nbsp; &nbsp;const auto b = ci; //here b is const int &nbsp; &nbsp; &nbsp;const auto f = &amp;ci; // this will make a const pointer pointing to a const int</li></ol><li>decltype — this couls make use if another type to define the type of some variable<span style=\"line-height: 1.4;\">&nbsp;</span></li><ol><li>decltype(f()) a; // a’s type is the return type of f()</li><li>decltype will not get object for reference like: int i = 0, &amp;j = i; decltype(j) m = i; // here m is a int&amp; and has to be inited</li><li>adding () will make a reference: int i = 0; decltype(i) b; //okay b is an int &nbsp; &nbsp; decltype((i)) c; // error because c is a ref and has to be inited</li></ol></ol><li>define self-own data structure</li><ol><li>make a new data structure by struct</li><ol><li>struct Sales_data {std::string isbn; double revenue = 0.0; // this is a in-class initializer};</li><li>writing self-own header file</li><ol><li>preprocessor is a program that will run before compiler; include and make a correct running context</li><li>to avoid duplicate including &nbsp;#ifndef SALES_DATA_H #define SALES_DATA_H &lt;…&gt; #endif /// then this .h file will not be included more than once</li></ol></ol></ol></ol></div>"
    }
  ]
}