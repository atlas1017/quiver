{
  "title": "whatsapp 待准备面经",
  "cells": [
    {
      "type": "text",
      "data": "<div><span style=\"color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\">TODO: 会写简单的并发的code 用java；</span></div><span style=\"color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\"><div><span style=\"color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\"><br></span></div><div><span style=\"color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\"><br></span></div>1、你是如何知道WhatsApp的？</span><div><span style=\"color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp;friend and acquisition by FB and know ratio of engineer to users;</span><br style=\"word-wrap: break-word; color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\">2、你用过WhatsApp吗？对他的功能/特性/UI做一下评价</span><br style=\"word-wrap: break-word; color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\">3、TCP/UDP有什么区别</span></div><div><br></div><div>TCP — transmission control protocol<div>UDP — User datagram protocol</div><div><br></div><div>TCP 是 connection oriented的 UDP 是connection less 的<div>具体说就是建立连接的时候 对于TCP而言 有三次 client — SYN server SYN ACK 然后 client ACK 然后完成连接</div><div>UDP 传输数据不需要建立连接</div><div><div>如果TCP missing some data, it would resend it but for UDP, the data were lost</div><div>TCP has congestion control but UDP does not<div>TCP 传送的东西都是有序的 UDP没有<div>TCP 比较慢 UDP 比较快</div></div></div></div></div></div><div><font class=\"jammer\" style=\"word-wrap: break-word; font-size: 10px; color: rgb(255, 255, 255); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; widows: 1; background-color: rgb(255, 255, 255);\"></font><br style=\"word-wrap: break-word; color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\">4. &nbsp;HTTP/HTTPS的默认端口号</span></div><div><font class=\"jammer\" style=\"word-wrap: break-word; font-size: 10px; color: rgb(255, 255, 255); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; widows: 1; background-color: rgb(255, 255, 255);\"></font>&nbsp; &nbsp; &nbsp;HTTP 传输的端口号 80<div>&nbsp; &nbsp; &nbsp;HTTPS 传输的端口号 443</div><div>&nbsp; &nbsp; &nbsp;EMAIL 的端口号 25 — SMTP simple mail transfer protocol</div><span style=\"color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\">5、哈希表 vs 自平衡二叉树： 插入/查找复杂度 空间复杂度 在选用的时候如何权衡</span><div style=\"widows: 1;\"><font color=\"#555555\" face=\"Tahoma, Microsoft Yahei, STXihei, Simsun\"><span style=\"font-size: 14px; line-height: 19.090900421142578px; background-color: rgb(255, 255, 255);\">It also depends on different implementations of Hashing, if I assume that hashing is implemented by array of linkedlist, then insertion of hashing is O(1) and search in a hashing is average k and worse n, k is num of all nodes over num of all different values; for BST strictly logn for both</span></font></div><div style=\"widows: 1;\"><font color=\"#555555\" face=\"Tahoma, Microsoft Yahei, STXihei, Simsun\"><span style=\"font-size: 14px; line-height: 19.090900421142578px; background-color: rgb(255, 255, 255);\">for hashing space is adequate or we do searching very often (data is relatively kind of static)&nbsp;</span></font><span style=\"color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.090900421142578px; background-color: rgb(255, 255, 255);\">for BST, stream of data, not enough&nbsp;</span><span style=\"color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.090900421142578px;\">space</span></div><div style=\"widows: 1;\"><font color=\"#555555\" face=\"Tahoma, Microsoft Yahei, STXihei, Simsun\"><span style=\"font-size: 14px; line-height: 19.090900421142578px;\"><br></span></font></div></div>"
    },
    {
      "type": "text",
      "data": "<span style=\"color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\">1. 给一个linked list, 求长度</span><div><font class=\"jammer\" style=\"word-wrap: break-word; font-size: 10px; color: rgb(255, 255, 255); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; widows: 1; background-color: rgb(255, 255, 255);\"></font>cur = head count = 0 while(cur != null) count++; return count;&nbsp;</div><div><span style=\"color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\">2. 实现在linked list中append一个节点</span></div><div><font class=\"jammer\" style=\"word-wrap: break-word; font-size: 10px; color: rgb(255, 255, 255); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; widows: 1; background-color: rgb(255, 255, 255);\"></font>get next, assign next, and one.next = &nbsp;next;<br style=\"word-wrap: break-word; color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\">3. 实现在linked list中prepend一个节点</span></div><div><font class=\"jammer\" style=\"word-wrap: break-word; font-size: 10px; color: rgb(255, 255, 255); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; widows: 1; background-color: rgb(255, 255, 255);\"></font>find some node when node.next.val == target; then do append (need a phead because we might modify the first node)<br style=\"word-wrap: break-word; color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\">4. 利用上面的函数，实现将一个数组变成linked list.</span></div><div><div style=\"widows: 1;\"><font color=\"#555555\" face=\"Tahoma, Microsoft Yahei, STXihei, Simsun\"><span style=\"font-size: 14px; line-height: 19.090900421142578px; background-color: rgb(255, 255, 255);\">divide and do prepend and append to the mid one</span></font></div><div><span style=\"color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\">5. </span><span style=\"color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\">主要讨论project。然后要实现Trie的插入</span></div><div><span style=\"color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\"><br></span></div><div><span style=\"color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\">1. 把一个sorted list转成balanced binary search tree&nbsp;</span></div><div><span style=\"color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\">always find mid and do construct tree from a range of the array</span></div><div><span style=\"color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 14px; line-height: 19.0909px; widows: 1; background-color: rgb(255, 255, 255);\">2. 把sorted list转成complete binary search tree</span></div></div><div style=\"widows: 1;\"><font color=\"#555555\" face=\"Tahoma, Microsoft Yahei, STXihei, Simsun\"><span style=\"font-size: 14px; line-height: 19.090900421142578px; background-color: rgb(255, 255, 255);\">a.先架好架子 计算好数目 然后用prev的方法做inorder iteration （存储最后一层的node 然后加上去）</span></font></div><div style=\"widows: 1;\"><font color=\"#555555\" face=\"Tahoma, Microsoft Yahei, STXihei, Simsun\"><span style=\"font-size: 14px; line-height: 19.090900421142578px; background-color: rgb(255, 255, 255);\">b.对于没有最后一层的right child 总是没有影响的， 不断切割知道直到是一个full 右面是上一层的full</span></font></div>"
    },
    {
      "type": "text",
      "data": "1. create a data type for singly linked list;<div>2. use the datatype and then merge two sorted lists</div><div>3. do merging sort using the same data structure</div><div>4. do testing and exercising for above<br><div><br></div></div>"
    },
    {
      "type": "code",
      "language": "java",
      "data": "// for data type of singly linked list\nprivate class ListNode {\n  ListNode next;\n  int val;\n  public ListNode (int v) {\n    next = null;\n    val = v;\n  }\n}"
    },
    {
      "type": "code",
      "language": "java",
      "data": "// merge two sorted lists\npublic ListNode mergeTwoSorted(ListNode n1, ListNode n2) {\n  ListNode phead = new ListNode(1);\n  ListNode prev = phead;\n  ListNoe p1 = n1;\n  ListNoe p2 = n2;\n  while(p1 @= null && p2 != null) {\n    if(p1.val < p2.val) {\n      prev.next = p1;\n      p1 = p1.next;\n      prev = prev.next;\n    }\n    else {\n      prev.next = p2;\n      p2 = p2.next;\n      prev = prev.next;\n    }\n  }\n  while(p1 != null) {\n    prev.next = p1;\n    p1 = p1.next;\n    prev = prev.next;\n  }\n  while(p2 != null) {\n    prev.next = p2;\n    p2 = p2.next;\n    prev= prev.next;\n  }\n  return phead.next;\n}"
    },
    {
      "type": "code",
      "language": "java",
      "data": "// merge sort for linkedlist\npublic ListNode mergeSort(ListNode head) {\n  if(head == null || head.next == null)\n    return head;\n  ListNode p1 = head;\n  ListNode p2 = head;\n  while(p2.next != null && p2.next.next != null) {\n    p1 = p1.next;\n    p2 = p2.next.next;\n  }\n  ListNode first = head;\n  ListNode second = p1.next;\n  p1.next = null;\n  return (mergeTwoSorted(first, second));\n}"
    }
  ]
}