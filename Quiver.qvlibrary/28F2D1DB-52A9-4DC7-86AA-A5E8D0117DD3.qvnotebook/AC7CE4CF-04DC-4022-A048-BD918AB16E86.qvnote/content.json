{
  "title": "LeetCode disjoint set",
  "cells": [
    {
      "type": "text",
      "data": "longest consecutinve sequence<div>连续的很自然的想法是从中间往两边找</div>"
    },
    {
      "type": "code",
      "language": "java",
      "data": "// idea one\r\npublic class Solution {\r\n    public int longestConsecutive(int[] nums) {\r\n        HashSet<Integer> num = new HashSet<Integer>();\r\n        for(int i : nums)\r\n            num.add(i);\r\n        int max = 0;\r\n        for(int i : nums) {\r\n            if(!num.contains(i))\r\n                continue;\r\n            int count = 1;\r\n            int temp1 = i;\r\n            int temp2 = i;\r\n            num.remove((Integer)i);\r\n            while(num.contains(temp1 + 1)) {\r\n                count++;\r\n                temp1++;\r\n                num.remove((Integer)temp1);\r\n            }\r\n            while(num.contains(temp2 - 1)) {\r\n                count++;\r\n                temp2--;\r\n                num.remove((Integer)temp2);\r\n            }\r\n            max = Math.max(count, max);\r\n        }\r\n        return max;\r\n    }\r\n}"
    },
    {
      "type": "code",
      "language": "java",
      "data": "// idea 2\r\npublic class Solution {\r\n    public int longestConsecutive(int[] nums) {\r\n        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\r\n        int max = 0;\r\n        for(int i : nums) {\r\n            if(map.containsKey(i))\r\n                continue;\r\n            int left = map.containsKey(i - 1) ? map.get(i - 1) : 0;\r\n            int right = map.containsKey(i + 1) ? map.get(i + 1) : 0;\r\n            int sum = left + right + 1;\r\n            max = Math.max(sum, max);\r\n            map.put(i, 0);\r\n            map.put(i - left, sum);\r\n            map.put(i + right, sum);\r\n        }\r\n        return max;\r\n    }\r\n}"
    },
    {
      "type": "text",
      "data": "surrounded region<div>1. 优化1 开始的时候 从边上开始DFS 代码短 但是会有stackOverFlow</div><div>2. 优化2 开始的时候 用一个boolean[][] visited 存是不是visited过 发现char[][] in place 操作</div>"
    },
    {
      "type": "code",
      "language": "java",
      "data": "public class Solution {\r\n    public void solve(char[][] board) {\r\n        if(board.length < 3 || board[0].length < 3)\r\n            return;\r\n        for(int i = 0; i < board.length; i++) {\r\n            if(board[i][0] == 'O') {\r\n                board[i][0] = 'A';\r\n                doDFS(board, i, 1); // march inside by one step \r\n            }\r\n            if(board[i][board[0].length - 1] == 'O') {\r\n                board[i][board[0].length - 1] = 'A';\r\n                doDFS(board, i, board[0].length - 2); \r\n            }\r\n        }\r\n        for(int i = 1; i < board[0].length - 1; i++) {\r\n            if(board[0][i] == 'O'){\r\n                board[0][i] = 'A';\r\n                doDFS(board, 1, i);   \r\n            }\r\n            if(board[board.length - 1][i] == 'O') {\r\n                board[board.length - 1][i] = 'A';\r\n                doDFS(board, board.length - 2, i); \r\n            } \r\n        }\r\n        for(int i = 0; i < board.length; i++) {\r\n            for(int j = 0; j < board[0].length; j++) {\r\n                if(board[i][j] == 'A')\r\n                    board[i][j] = 'O';\r\n                else \r\n                    board[i][j] = 'X';\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    \r\n    public void doDFS(char[][] board, int row, int col) {\r\n        if(row >= board.length - 1 || row < 1 || col >= board[0].length - 1 || col < 1)\r\n            return;\r\n        if(board[row][col] == 'A' || board[row][col] == 'B')\r\n            return;\r\n        if(board[row][col] == 'O') {\r\n            board[row][col] = 'A';\r\n            doDFS(board, row - 1, col);\r\n            doDFS(board, row + 1, col);\r\n            doDFS(board, row, col - 1);\r\n            doDFS(board, row, col + 1);\r\n        }\r\n        else\r\n            board[row][col] = 'B';\r\n        return;\r\n    }\r\n}"
    }
  ]
}